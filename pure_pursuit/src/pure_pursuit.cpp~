//pure_pursuit2.cpp
#include <pure_pursuit/pure_pursuit.h>
#include <pluginlib/class_list_macros.h>
#include <visualization_msgs/Marker.h>

PLUGINLIB_DECLARE_CLASS(pure_pursuit, PurePursuit, pure_pursuit::PurePursuit, nav_core::BaseLocalPlanner)

namespace pure_pursuit{
    PurePursuit::PurePursuit(): tf_(NULL), costmap_ros_(NULL) {}
	
    //ok
	void PurePursuit::initialize(std::string name, tf::TransformListener* tf, costmap_2d::Costmap2DROS* costmap_ros){
		tf_ = tf;
		costmap_ros_ = costmap_ros;
		current_waypoint_ = 0;
		goal_reached_time_ = ros::Time::now();
		ros::NodeHandle node_private("~/" + name);
		collision_planner_.initialize(name, tf_, costmap_ros_);
        
		node_private.param("k_trans", K_trans_, 3.0);
        node_private.param("k_rot", K_rot_, 3.0);

        node_private.param("tolerance_trans", tolerance_trans_, 0.1);
        node_private.param("tolerance_rot", tolerance_rot_, 0.03);
        node_private.param("tolerance_timeout", tolerance_timeout_, 1.5);
        node_private.param("epsilon", epsilon_, 1e-6);
        node_private.param("lookAheadRatio",lookAheadRatio_, 1.0);
        node_private.param("holonomic", holonomic_, false);

        node_private.param("samples", samples_, 100);

        node_private.param("max_vel_lin", max_vel_lin_, 0.3);
        node_private.param("max_vel_th", max_vel_th_, 1.0);

        node_private.param("min_vel_lin", min_vel_lin_, 0.3);
        node_private.param("min_vel_th", min_vel_th_, -0.3);
        node_private.param("min_in_place_vel_th", min_in_place_vel_th_, 0.0);
        node_private.param("in_place_trans_vel", in_place_trans_vel_, 0.0);

        node_private.param("trans_stopped_velocity", trans_stopped_velocity_, 1e-4);
        node_private.param("rot_stopped_velocity", rot_stopped_velocity_, 1e-4);

        node_private.param("lookahead_count", lookahead_count_, 1);
        node_private.param("lookahead_weight", lookahead_weight_, 0.2);
        
        node_private.param("velocity_", velocity_, 0.2);
        node_private.param("max_heading_diff_before_moving", max_heading_diff_before_moving_, 0.17);
        node_private.param("turn_in_place_first", turn_in_place_first_, false);
        
        ros::NodeHandle node;
        odom_sub_ = node.subscribe<nav_msgs::Odometry>("odom", 1, boost::bind(&PurePursuit::odomCallback, this, _1));
        vel_pub_ = node.advertise<geometry_msgs::Twist>("cmd_vel", 10);
        
        
        ROS_DEBUG("Initialized");
	}
    
    //ok
	void PurePursuit::odomCallback(const nav_msgs::Odometry::ConstPtr& msg){
		boost::mutex::scoped_lock lock(odom_lock_);
		base_odom_.twist.twist.linear.x = msg->twist.twist.linear.x;
		base_odom_.twist.twist.linear.y = msg->twist.twist.linear.y;
		base_odom_.twist.twist.angular.z = msg->twist.twist.angular.z;
		ROS_DEBUG("In the odometry callback with velocity values: (%.2f, %.2f, %.2f)",
		base_odom_.twist.twist.linear.x, base_odom_.twist.twist.linear.y, base_odom_.twist.twist.angular.z);
	}
    
    //ok
	bool PurePursuit::setPlan(const std::vector<geometry_msgs::PoseStamped>& global_plan){
		current_waypoint_ = 0;
        nextWayPoint_ = 1;
		goal_reached_time_ = ros::Time::now();
		if(!transformGlobalPlan(*tf_, global_plan, *costmap_ros_, costmap_ros_->getGlobalFrameID(), global_plan_)){
			ROS_ERROR("Could not transform the global plan to the frame of the controller");
			return false;
		}
		return true;
	}
    
    //ok
	bool PurePursuit::isGoalReached(){
		if(goal_reached_time_ + ros::Duration(tolerance_timeout_) < ros::Time::now() && stopped()){
			return true;
		}
		return false;
	}
	
	//ok
	bool PurePursuit::stopped(){
		//copy over the odometry information
		nav_msgs::Odometry base_odom;
		{
		boost::mutex::scoped_lock lock(odom_lock_);
		base_odom = base_odom_;
		}
		return fabs(base_odom.twist.twist.angular.z) <= rot_stopped_velocity_
		&& fabs(base_odom.twist.twist.linear.x) <= trans_stopped_velocity_
		&& fabs(base_odom.twist.twist.linear.y) <= trans_stopped_velocity_;
	}
    
    //ok
    bool PurePursuit::transformGlobalPlan(const tf::TransformListener& tf, const std::vector<geometry_msgs::PoseStamped>& global_plan, 
		const costmap_2d::Costmap2DROS& costmap, const std::string& global_frame,
		std::vector<geometry_msgs::PoseStamped>& transformed_plan){
			
			const geometry_msgs::PoseStamped& plan_pose = global_plan[0];
			transformed_plan.clear();
			try{
				if (!global_plan.size() > 0){
					ROS_ERROR("Recieved plan with zero length");
					return false;
				}
				tf::StampedTransform transform;
				tf.lookupTransform(global_frame, ros::Time(), 
				plan_pose.header.frame_id, plan_pose.header.stamp, 
				plan_pose.header.frame_id, transform);
				
				tf::Stamped<tf::Pose> tf_pose;
				geometry_msgs::PoseStamped newer_pose;
				//now we'll transform until points are outside of our distance threshold
				for(unsigned int i = 0; i < global_plan.size(); ++i){
					const geometry_msgs::PoseStamped& pose = global_plan[i];
					poseStampedMsgToTF(pose, tf_pose);
					tf_pose.setData(transform * tf_pose);
					tf_pose.stamp_ = transform.stamp_;
					tf_pose.frame_id_ = global_frame;
					poseStampedTFToMsg(tf_pose, newer_pose);
					transformed_plan.push_back(newer_pose);
                    //ROS_INFO("glob: %f %f %f",pose.pose.position.x,pose.pose.position.y,pose.pose.position.z);
                    ROS_INFO("newer:%f %f %f",newer_pose.pose.position.x,newer_pose.pose.position.y,newer_pose.pose.position.z);
				}
			}
			catch(tf::LookupException& ex) {
				ROS_ERROR("No Transform available Error: %s\n", ex.what());
				return false;
			}
			catch(tf::ConnectivityException& ex) {
				ROS_ERROR("Connectivity Error: %s\n", ex.what());
				return false;
			}
			catch(tf::ExtrapolationException& ex) {
				ROS_ERROR("Extrapolation Error: %s\n", ex.what());
				if (global_plan.size() > 0)
					ROS_ERROR("Global Frame: %s Plan Frame size %d: %s\n", global_frame.c_str(), (unsigned int)global_plan.size(), global_plan[0].header.frame_id.c_str());
				return false;
			}
			return true;
	}

    bool PurePursuit::computeVelocityCommands(geometry_msgs::Twist& cmd_vel){
        //get the current pose of the robot in the fixed frame
        tf::Stamped<tf::Pose> robot_pose;
        geometry_msgs::PoseStamped robot_poseit;
        cmd_vel.linear.x = 0.0;
        cmd_vel.linear.y = 0.0;
        cmd_vel.linear.z = 0.0;
        cmd_vel.angular.x = 0.0;
        cmd_vel.angular.y = 0.0;
        cmd_vel.angular.z = 0.0;
        
        if(!costmap_ros_->getRobotPose(robot_pose)){
            ROS_ERROR("Can't get robot pose");
            geometry_msgs::Twist empty_twist;
            cmd_vel = empty_twist;
            return false;
        }
        poseStampedTFToMsg(robot_pose, robot_poseit);
        ROS_INFO("Current pose: %f %f %f ", robot_poseit.pose.position.x,robot_poseit.pose.position.y,robot_poseit.pose.position.z);
        
        tf::Stamped<tf::Pose> cur_pose_of_waypoints;
        tf::Stamped<tf::Pose> target_pose;
        tf::poseStampedMsgToTF(global_plan_[current_waypoint_], cur_pose_of_waypoints);
        ROS_INFO("Curren waypoint pose: %f %f %f",global_plan_[current_waypoint_].pose.position.x,global_plan_[current_waypoint_].pose.position.y,global_plan_[current_waypoint_].pose.position.z);
        ROS_INFO("current waypoint #: %d",current_waypoint_);
        
        tf::Vector3 v1(robot_poseit.pose.position.x,robot_poseit.pose.position.y,robot_poseit.pose.position.z);
        geometry_msgs::PoseStamped transformedPose;
        tf::Vector3 v2(global_plan_[current_waypoint_].pose.position.x,global_plan_[current_waypoint_].pose.position.y,
        global_plan_[current_waypoint_].pose.position.z);
        
        double lookAheadDistance_=tf::tfDistance(v1, v2);
        double lookAheadAngle_=tf::tfAngle(v1, v2);
        ROS_INFO("lookahead Distance & Angle: %f , %f",lookAheadDistance_,lookAheadAngle_);
        
        //double lookaheaddist2=getLookAheadDistance(current_waypoint_);
        //double lookaheadangle2=getLookAheadAngle(current_waypoint_);
        //ROS_INFO("lookahead Distance2 & Angle2: %f , %f",lookaheaddist2,lookaheadangle2);
        
        if (std::abs(std::sin(lookAheadAngle_)) >= epsilon_)
            arcDistance_=lookAheadDistance_/sin(lookAheadAngle_)*lookAheadAngle_;
        else
            arcDistance_=lookAheadDistance_;
        ROS_INFO("arcdistance: %f",arcDistance_);
        //double arcdist = getArcDistance(current_waypoint_);
        //ROS_INFO("arcdistance2: %f",arcdist);
        //double lookthresh=getLookAheadThreshold();
        //ROS_INFO("thresh: %f",lookthresh);
        geometry_msgs::PoseStamped pose2;
        getInterpolatedPose(current_waypoint_,pose2);
        
        //ust taraf ok...
        geometry_msgs::PoseStamped pose;
        double angularVelocity = 0.0;
        double linearVelocity=0.0;
        float deltaX=std::abs(global_plan_[current_waypoint_].pose.position.x-robot_poseit.pose.position.x);//abs sikintimi yoksa ?
        float dist=sqrt((deltaX*deltaX)+((global_plan_[current_waypoint_].pose.position.y-robot_poseit.pose.position.y)*(global_plan_[current_waypoint_].pose.position.y-robot_poseit.pose.position.y)));
        float radius=(dist*dist)/(2*deltaX);
        ROS_INFO("radius & dist: %f %f",radius,dist);
        float angle2=acos(((2*radius*radius)-(dist*dist))/(2*radius*radius));
        ROS_INFO("ANGLE with cosine theo: %f",angle2);
    //gitdeki kodda adam 0.5*(l/sin(angle)) yapmis ancak formulden cikartinca sin(angle/2) olması lazim cosine daha garanti duruyor...
        
        float angle_a=atan2(robot_poseit.pose.position.x,robot_poseit.pose.position.y);
        float angle_b=atan2(global_plan_[current_waypoint_].pose.position.x,global_plan_[current_waypoint_].pose.position.y);
    //??gelen - bir işe yarar mı ? angular zye geçirirken??
        float angle_from_a_to_b=angle_b-angle_a;
        ROS_INFO("Angle with atan2: %f",angle_from_a_to_b);
        if(std::abs(std::sin(lookAheadAngle_)) >= epsilon_)//angle_from_a_to_b>0 idi fark eder mi SOR!!
        angularVelocity=(M_PI/180)*angle2; //  RADYANI SOR!!
        else
        angularVelocity=(M_PI/180)*angle2*-1;  //radyana cevir ang.z zaten rad/s 
        linearVelocity=radius*angle2; //radyana cevir curvature length kadar m/s bas  --- *(M_PI/180)
        
        //yeni taktique: rotate heading 90degree take dot product  
        
        cmd_vel.linear.x=linearVelocity;
        cmd_vel.angular.z=angularVelocity;
        ROS_INFO("HOOOO: %f %f",cmd_vel.linear.x,cmd_vel.angular.z);
        
        if(fabs(cmd_vel.linear.x) <= tolerance_trans_ &&
            fabs(cmd_vel.angular.z) <= tolerance_rot_){
                ROS_INFO("while..");
                      if(current_waypoint_ < global_plan_.size() - 1)
      {
        current_waypoint_++;
        tf::poseStampedMsgToTF(global_plan_[current_waypoint_], target_pose);
      }
      else
      {
        ROS_INFO("Reached goal: %d", current_waypoint_);
        return true;
      }
            }
            return true;
            
        }
   
   
   
    //yeni eklemeler..06-02
    //no error test etmedim
    bool PurePursuit::getInterpolatedPose(int wayPoint,geometry_msgs::PoseStamped& interpolatedPose){
        if (global_plan_.size()>0) {
            if (wayPoint > 0) {
                double l_t = getLookAheadThreshold();
                double p_t = getLookAheadDistance(current_waypoint_);
                if (p_t < l_t) {
                    tf::Stamped<tf::Pose> robot_pose;
                    if(!costmap_ros_->getRobotPose(robot_pose)){
                        ROS_ERROR("Can't get robot pose");
                        return false;
                    }
                    //tf::Stamped<tf::Pose> cur_pose_of_waypoints;
                    //tf::Stamped<tf::Pose> cur_pose_of_waypoints_next;
                    //tf::poseStampedMsgToTF(global_plan_[current_waypoint_], cur_pose_of_waypoints);
                    //tf::poseStampedMsgToTF(global_plan_[current_waypoint_+1], cur_pose_of_waypoints_next);
                    
                    geometry_msgs::PoseStamped p_0;
                    poseStampedTFToMsg(robot_pose, p_0);
               
                    geometry_msgs::PoseStamped p_1= 
                        global_plan_[wayPoint];
                    geometry_msgs::PoseStamped p_2 = 
                        global_plan_[wayPoint+1];
              
                    tf::Vector3 v_1(p_2.pose.position.x-p_0.pose.position.x,
                              p_2.pose.position.y-p_0.pose.position.y,
                              p_2.pose.position.z-p_0.pose.position.z);
                    tf::Vector3 v_2(p_1.pose.position.x-p_0.pose.position.x,
                              p_1.pose.position.y-p_0.pose.position.y,
                              p_1.pose.position.z-p_0.pose.position.z);
                    tf::Vector3 v_0(p_2.pose.position.x-p_1.pose.position.x,
                              p_2.pose.position.y-p_1.pose.position.y,
                              p_2.pose.position.z-p_1.pose.position.z);
              
                    double l_0 = v_0.length();
                    double l_1 = v_1.length();
                    double l_2 = v_2.length();
              
                    v_0.normalize();
                    v_2.normalize();
              
                    double alpha_1 = M_PI-tf::tfAngle(v_0, v_2);
                    double beta_2 = asin(l_2*sin(alpha_1)/l_t);
                    double beta_0 = M_PI-alpha_1-beta_2;
                    double l_s = l_2*sin(beta_0)/sin(beta_2);
                    tf::Vector3 p_s(p_1.pose.position.x+v_0[0]*l_s,
                              p_1.pose.position.x+v_0[1]*l_s,
                              p_1.pose.position.x+v_0[2]*l_s);

                    interpolatedPose.pose.position.x = p_s[0];
                    interpolatedPose.pose.position.y = p_s[1];
                    interpolatedPose.pose.position.z = p_s[2];
                    ROS_INFO("Interpolated: %f %f %f",interpolatedPose.pose.position.x,interpolatedPose.pose.position.y,interpolatedPose.pose.position.z);
                    return true;
                }
            }
            interpolatedPose = global_plan_[wayPoint];
            ROS_INFO("Interpolated_DIS: %f %f %f",interpolatedPose.pose.position.x,interpolatedPose.pose.position.y,interpolatedPose.pose.position.z);
            return true;
        }
        return false;
    }
   
    //ok ama kusuratta fark cikiyor
    double PurePursuit::getLookAheadThreshold(){
        return lookAheadRatio_*base_odom_.twist.twist.linear.x;
    } 
    
    //ok tested
    double PurePursuit::getLookAheadDistance(int waypoint){
        tf::Stamped<tf::Pose> robot_pose;
        if(!costmap_ros_->getRobotPose(robot_pose)){
            ROS_ERROR("Can't get robot pose");
            return -1.0;
        }
        geometry_msgs::PoseStamped origin;
        poseStampedTFToMsg(robot_pose, origin);
        
        tf::Vector3 v1(origin.pose.position.x,
                       origin.pose.position.y,
                       origin.pose.position.z);
        tf::Vector3 v2(global_plan_[waypoint].pose.position.x,
                       global_plan_[waypoint].pose.position.y,
                       global_plan_[waypoint].pose.position.z);
        
        return tf::tfDistance(v1, v2);
      }
    
    //ok tested
    double PurePursuit::getLookAheadAngle(int waypoint){
        tf::Stamped<tf::Pose> robot_pose;
        if(!costmap_ros_->getRobotPose(robot_pose)){
            ROS_ERROR("Can't get robot pose");
            return -1.0;
        }
        geometry_msgs::PoseStamped origin;
        poseStampedTFToMsg(robot_pose, origin);
        
        tf::Vector3 v1(origin.pose.position.x,
                   origin.pose.position.y,
                   origin.pose.position.z);
        tf::Vector3 v2(global_plan_[waypoint].pose.position.x,
                       global_plan_[waypoint].pose.position.y,
                       global_plan_[waypoint].pose.position.z);
    
        return tf::tfAngle(v1, v2);
    }

    //ok tested
    double PurePursuit::getArcDistance(int waypoint){
        double lookAheadDistance = getLookAheadDistance(waypoint);
        double lookAheadAngle = getLookAheadAngle(waypoint);

        if (std::abs(std::sin(lookAheadAngle)) >= epsilon_)
          return lookAheadDistance/sin(lookAheadAngle)*lookAheadAngle;
        else
          return lookAheadDistance;
  }

};






